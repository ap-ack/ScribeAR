{"version":3,"sources":["components/TopSpace/Options/OnOff/index.js","components/TopSpace/Options/PlusMinus/index.js","components/TopSpace/Options/index.js","App.js","components/TopSpace/index.js","serviceWorker.js","index.js"],"names":["OnOff","props","Object","values","this","keyVal","text","color","className","item","onClick","toggle","style","backgroundColor","setButton","React","Component","PlusMinus","decrement","value","increment","Options","updateCss","hidden","logsomething","console","log","id","display","lockScreen","invertColors","opts","DEFAULT_TEXT_SIZE","DEFAULT_LINE_WIDTH","DEFAULT_NUM_LINES","App","state","textSize","lineWidth","numLines","obj","setState","window","innerHeight","innerWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uYAgDeA,G,wBA1CV,WAAYC,GAAQ,qEACTA,I,yEAIN,OAAIC,OAAOC,OAAOC,KAAKH,MAAMI,QAAQ,GACzB,CACFC,KAAM,MACNC,MAAO,WAEV,CACFD,KAAM,KACNC,MAAO,a,+BAIP,IAAD,OACJ,OACK,yBAAKC,UAAU,OACV,yBAAKA,UAAU,SACV,2BAAIJ,KAAKH,MAAMQ,OAEpB,yBAAKD,UAAU,4BACV,4BACEE,QAAU,WACP,EAAKT,MAAMU,OAAO,EAAKV,MAAMI,SAEhCO,MAAO,CAACC,gBAAiBT,KAAKU,YAAYP,QACtCH,KAAKU,YAAYR,Y,GA7B5BS,IAAMC,Y,MCDX,SAASC,EAAT,GAA2D,IAAtCR,EAAqC,EAArCA,KAAaS,GAAwB,EAA/BC,MAA+B,EAAxBD,WAAWE,EAAa,EAAbA,UACvD,OACK,yBAAKZ,UAAU,OACV,yBAAKA,UAAU,4BACV,4BAAQE,QAASQ,GAAjB,MAEL,yBAAKV,UAAU,SACV,2BAAIC,IAET,yBAAKD,UAAU,4BACV,4BAAQE,QAASU,GAAjB,O,UCkDLC,E,2MAzDVC,UAAY,WACP,OAAI,EAAKrB,MAAMsB,OACH,OACL,S,EAGZC,aAAe,WACVC,QAAQC,IAAI,gB,wEAIZ,OACK,yBAAKlB,UAAU,UAAUmB,GAAG,gBAAgBf,MAAO,CAACgB,QAASxB,KAAKkB,cAC7D,uCACA,yBAAKd,UAAU,gBACV,kBAAC,EAAD,CACKC,KAAK,YACLU,MAAM,KACND,UAAWd,KAAKoB,aAChBJ,UAAWhB,KAAKoB,gBAG1B,yBAAKhB,UAAU,gBACV,kBAAC,EAAD,CACKC,KAAK,aACLU,MAAM,KACND,UAAWd,KAAKoB,aAChBJ,UAAWhB,KAAKoB,gBAG1B,yBAAKhB,UAAU,gBACV,kBAAC,EAAD,CACKC,KAAK,kBACLU,MAAM,KACND,UAAWd,KAAKoB,aAChBJ,UAAWhB,KAAKoB,gBAG1B,yBAAKhB,UAAU,gBACV,kBAAC,EAAD,CAAOC,KAAK,cACPJ,OAAQ,CAAEwB,YAAY,GACtBlB,OAAQP,KAAKH,MAAMU,UAE7B,yBAAKH,UAAU,gBACV,kBAAC,EAAD,CAAOC,KAAK,gBACPJ,OAAQ,CAAEyB,aAAc1B,KAAKH,MAAM8B,KAAKD,cACxCnB,OAAQP,KAAKH,MAAMU,e,GA/C3BI,IAAMC,WCDxBgB,GCDmBjB,IAAMC,UDCL,IACpBiB,EAAqB,GACrBC,EAAoB,EAyBTC,E,2MAtBVC,MAAQ,CACHC,SAAUL,EACVM,UAAWL,EACXM,SAAUL,EACVL,YAAY,EACZC,cAAc,G,6EAGLU,GACTpC,KAAKqC,SAASD,K,+BAId,OACK,yBAAKhC,UAAU,OACV,sCAAYkC,OAAOC,aACnB,qCAAWD,OAAOE,iB,GAjBpB7B,IAAMC,WEGJ6B,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3e1d41e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\n//export default function OnOff({ item, value, toggle }) {\r\nclass OnOff extends React.Component {\r\n     constructor(props) {\r\n          super(props);\r\n     }\r\n\r\n     setButton() {\r\n          if (Object.values(this.props.keyVal)[0])\r\n               return {\r\n                    text: 'OFF',\r\n                    color: '#800000'\r\n               };\r\n          return {\r\n               text: 'ON',\r\n               color: '#008000'\r\n          };\r\n     }\r\n\r\n     render() {\r\n          return (\r\n               <div className=\"row\">\r\n                    <div className=\"col-8\">\r\n                         <p>{this.props.item}</p>\r\n                    </div>\r\n                    <div className=\"col-2 align-items-center\">\r\n                         <button\r\n                           onClick={ () => {\r\n                              this.props.toggle(this.props.keyVal);\r\n                           }}\r\n                           style={{backgroundColor: this.setButton().color}}>\r\n                              {this.setButton().text}\r\n                         </button>\r\n                    </div>\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nOnOff.propTypes = {\r\n     item: PropTypes.string.isRequired,\r\n     keyVal: PropTypes.objectOf(PropTypes.bool).isRequired,\r\n     toggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default OnOff;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nexport default function PlusMinus({ item, value, decrement, increment }) {\r\n     return (\r\n          <div className=\"row\">\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button onClick={decrement}>-</button>\r\n               </div>\r\n               <div className=\"col-6\">\r\n                    <p>{item}</p>\r\n               </div>\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button onClick={increment}>+</button>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n\r\nPlusMinus.propTypes = {\r\n     item: PropTypes.string,\r\n     value: PropTypes.string,\r\n     decrement: PropTypes.func,\r\n     increment: PropTypes.func,\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OnOff from './OnOff';\r\nimport PlusMinus from './PlusMinus';\r\nimport './index.css';\r\n\r\nclass Options extends React.Component {\r\n     updateCss = () => {\r\n          if (this.props.hidden)\r\n               return 'none';\r\n          return 'block';\r\n     }\r\n\r\n     logsomething = () => {\r\n          console.log(\"hello world\");\r\n     }\r\n\r\n     render() {\r\n          return (\r\n               <div className=\"Options\" id=\"options-space\" style={{display: this.updateCss()}}>\r\n                    <h1>Options</h1>\r\n                    <div className=\"item-wrapper\">\r\n                         <PlusMinus\r\n                              item=\"Text size\"\r\n                              value=\"48\"\r\n                              decrement={this.logsomething}\r\n                              increment={this.logsomething}\r\n                         />\r\n                    </div>\r\n                    <div className=\"item-wrapper\">\r\n                         <PlusMinus\r\n                              item=\"Line width\"\r\n                              value=\"48\"\r\n                              decrement={this.logsomething}\r\n                              increment={this.logsomething}\r\n                         />\r\n                    </div>\r\n                    <div className=\"item-wrapper\">\r\n                         <PlusMinus\r\n                              item=\"Number of lines\"\r\n                              value=\"48\"\r\n                              decrement={this.logsomething}\r\n                              increment={this.logsomething}\r\n                         />\r\n                    </div>\r\n                    <div className=\"item-wrapper\">\r\n                         <OnOff item=\"Lock screen\"\r\n                              keyVal={{ lockScreen: true }}\r\n                              toggle={this.props.toggle} />\r\n                    </div>\r\n                    <div className=\"item-wrapper\">\r\n                         <OnOff item=\"Invert colors\"\r\n                              keyVal={{ invertColors: this.props.opts.invertColors}}\r\n                              toggle={this.props.toggle} />\r\n                    </div>\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nOptions.propTypes = {\r\n     hidden: PropTypes.bool\r\n}\r\n\r\nexport default Options;\r\n","import React from 'react';\nimport './App.css';\nimport TextArea from './components/TextArea';\nimport TopSpace from './components/TopSpace';\n\nvar DEFAULT_TEXT_SIZE = 48;\nvar DEFAULT_LINE_WIDTH = 10;\nvar DEFAULT_NUM_LINES = 4;\n\nclass App extends React.Component {\n     state = {\n          textSize: DEFAULT_TEXT_SIZE,\n          lineWidth: DEFAULT_LINE_WIDTH,\n          numLines: DEFAULT_NUM_LINES,\n          lockScreen: true,\n          invertColors: false\n     }\n\n     changeSetting(obj) {\n          this.setState(obj);\n     }\n\n     render() {\n          return (\n               <div className=\"App\">\n                    <p>Height: {window.innerHeight}</p>\n                    <p>Width: {window.innerWidth}</p>\n               </div>\n          );\n     }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './index.css';\r\nimport Options from './Options';\r\n\r\nclass TopSpace extends React.Component {\r\n     constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n               optsHidden: false\r\n          };\r\n          this.updateCss = this.updateCss.bind(this);\r\n          this.toggle = this.toggle.bind(this);\r\n     }\r\n     updateCss() {\r\n          if (this.state.optsHidden)\r\n               return 'none';\r\n          return 'block';\r\n     }\r\n     hide() {\r\n          this.setState({\r\n               optsHidden: true\r\n          });\r\n     }\r\n     toggle() {\r\n          if (this.state.optsHidden)\r\n               this.setState({\r\n                    optsHidden: false\r\n               });\r\n     }\r\n     render() {\r\n          return (\r\n               <div className=\"container-fluid\" onClick={this.toggle}>\r\n                    <div className=\"row\">\r\n                         <div className=\"col-1\"></div>\r\n                         <div className=\"col-5\" id=\"options-region\">\r\n                              <Options hidden={this.state.optsHidden}\r\n                                   toggle={this.props.toggle}\r\n                                   opts={this.props.opts} />\r\n                         </div>\r\n                         <div className=\"col-6\" id=\"hide-region\"\r\n                           style={{display: this.updateCss()}}\r\n                           onClick={this.hide.bind(this)}>\r\n                              <p>Hide</p>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nexport default TopSpace;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}